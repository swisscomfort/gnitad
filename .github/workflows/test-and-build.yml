name: Test & Build

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fetisch_dating_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint
        run: npm run lint
      
      - name: Test Backend
        run: npm run test --workspace=apps/api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/fetisch_dating_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
      
      - name: Build
        run: npm run build:api

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Test Frontend
        run: npm run test --workspace=apps/web
      
      - name: Build Frontend
        run: npm run build:web
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3000

  test-ml:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          cd services/ml
          pip install -r requirements.txt
      
      - name: Lint
        run: |
          cd services/ml
          pip install pylint
          pylint **/*.py

  build-docker:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-ml]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Docker images
        run: |
          docker-compose build api web ml
        env:
          DOCKER_BUILDKIT: 1
