version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fdp-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: fetisch_dating
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fdp-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: fdp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - fdp-network

  # API Backend
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    container_name: fdp-api
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fetisch_dating
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-secret-change-in-production
      - PORT=3000
    ports:
      - "3000:3000"
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: npm run dev:api
    networks:
      - fdp-network

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: docker/web/Dockerfile
    container_name: fdp-web
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3000
      - PORT=3001
    ports:
      - "3001:3001"
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
      - /app/node_modules
      - /app/.next
    depends_on:
      - api
    command: npm run dev:web
    networks:
      - fdp-network

  # ML Services (Python)
  ml-service:
    build:
      context: .
      dockerfile: docker/ml/Dockerfile
    container_name: fdp-ml
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/fetisch_dating
      - REDIS_URL=redis://redis:6379
      - PORT=8000
    ports:
      - "8000:8000"
    volumes:
      - ./services/ml:/app/services/ml
      - ml_models:/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - fdp-network

  # Adminer (Database UI)
  adminer:
    image: adminer:latest
    container_name: fdp-adminer
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
    networks:
      - fdp-network

  # Redis Commander (Redis UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: fdp-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - fdp-network

volumes:
  postgres_data:
  redis_data:
  ml_models:

networks:
  fdp-network:
    driver: bridge
